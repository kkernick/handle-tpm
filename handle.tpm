#!/bin/bash

# Messages
error () { echo -e "\e[1;31m${1}\e[0m"; cleanup 1; }
success () { if [ -n $VERBOSE ]; then echo -e "\e[1;32m${1}\e[0m"; fi; }
info () { if [ -n $VERBOSE ]; then echo -e "\e[1;33m${1}\e[0m"; fi; }

# Cleanup the TPM Context and Session.
cleanup () {
  if test -f session.ctx; then tpm2_flushcontext session.ctx; fi
  cd ..
  shred -u /tmp/.tpm/* >/dev/null 2>&1
  rmdir /tmp/.tpm
  cd $OLDDIR
  erase
  exit $1
}

# Print help
help () {
cat << EOF
Usage: handle.tpm [-m MODE] [-a ADDRESS] [-i 500000] [-c CONTEXT] [-vnephs]
Seal secrets within the TPM

  -m: The function to perform. Can either be seal, unseal, or evict.
  -a: The address within the TPM to use
  -i: The iterations to perform when encrypting a secret via openssl (Only if -n defined)
  -v: Verbose printing
  -n: Do not use PCR registers for sealing secrets. You must provide a sealing pin instead.
  -e: Use both PCR and Pin for a multifactor encryption.
  -p: Persist the PCRs states instead of randomizing after unsealing (DANGEROUS)
  -s: Read from standard input.
  -c: Provide context as to what is being sealed/unsealed/evicted.
  -h: Print this message

Examples:
  handle.tpm -m seal -a 0x81010010       Seal a secret at address 0x81010010
  handle.tpm -m unseal -a 0x81010010 -p  Unseal the secret at 0x81010010, persisting the PCR state
  handle.tpm -m evict -a 0x81010010 -v   Evict the secret at 0x81010010, with verbose information.
EOF
exit 0
}

# Ask for a pin, use it to encrypt
encrypt () {
  PIN="0"; VERIFY="1"

  while [ "$PIN" != "$VERIFY" ]; do
    PIN=$(systemd-ask-password "Add a sealing pin for ${CONTEXT}")
    VERIFY=$(systemd-ask-password "Repeat")
  done
  echo "$1" | openssl aes-256-cbc -e -a -salt -iter $ITERATIONS -pass pass:"$PIN"
}

# Decrypt. We need to step out of the current directory because sometimes it doesn't exist and OpenSSL Complains.
decrypt () {
  cd ..
  openssl aes-256-cbc -d -a -salt -iter $ITERATIONS -pass pass:"$1"
  cd .tpm
}

# Erase the PCR values so values can no longer be retrieved.
erase () {
  if [ -z $PERSIST ]; then
    
    tpm2_pcrextend 0:sha256=$(tpm2_pcrread sha256:0 | sha256sum | awk '{print $1}')
    tpm2_pcrextend 7:sha256=$(tpm2_pcrread sha256:7 | sha256sum | awk '{print $1}')
  else info "You are not overwriting the PCRs! The password can be trivially leaked!"
  fi
}

# Ensure that cleanup is always performed.
trap cleanup SIGINT
trap cleanup SIGTERM

# TPM needs root.
if [ "$EUID" -ne 0 ]; then error "Run script as root!"; fi

# These are default values, but they can be changed through the command line arguments.
ITERATIONS=500000
FILE=/dev/stdout
CONTEXT="TPM"
OLDDIR=$PWD

# Parse args.
while getopts "m:a:i:c:vnphse" opt; do
  case $opt in
    m)
      MODE=$OPTARG
      ;;
    a)
      ADDRESS=$OPTARG
      ;;
    i)
      ITERATIONS=$OPTARG
      ;;
    c)
      CONTEXT=$OPTARG
      ;;
    v)
      VERBOSE=true
      ;;
    n)
      NO_PCR=true
      ;;
    p)
      PERSIST=true
      ;;
    s)
      IN=true
      ;;
    e)
      ENHANCED=true
      ;;
    h)
      help
      ;;
    \?)
      error "Unexpected argument $OPTARG"
      ;;
  esac
done

# There are no additional command line arguments needed for erase.
if [ "${MODE}" == "erase" ]; then
  erase
  exit 0
fi

# Everything else needs a mode and address.
if [ -z $MODE -o -z $ADDRESS ]; then error "Please provide a mode and address"; fi

# Make a temporary directory for storing context.
mkdir -p /tmp/.tpm
chmod 700 /tmp/.tpm
cd /tmp/.tpm

# We don't want to let users overwrite existing information. They need to evict it first.
tpm2_readpublic -c "$ADDRESS" > /dev/null 2>&1
VACANT=$?
if [ $VACANT -eq 1 ]; then info "Address is vacant"; fi

# Handle the commands
if [ "${MODE}" == "seal" ]; then
  if [ $VACANT -eq 0 ]; then error "Will not override existing value. Use evict first"; fi

  # Get a secret to store.
  KEY="0"; VERIFY="1"
  while [ "$KEY" != "$VERIFY" ]; do
    if [ -n "$IN" ]; then
      KEY=$(cat)
      VERIFY=$KEY
    else
      KEY=$(systemd-ask-password "Enter the secret for ${CONTEXT}")
      VERIFY=$(systemd-ask-password "Repeat")
    fi
  done

  # Create the primary key
  tpm2_createprimary -Q -C o -c prim.ctx

  # NO_PCR needs a sealing pin, otherwise it could be trivially decrypted.
  if [ -n "$NO_PCR" ]; then
    info "Without sealing against the PCR, a password must be supplied for security for ${CONTEXT}"
    encrypt "${KEY}" | tpm2_create -Q -g sha256 -u seal.pub -r seal.priv -i- -C prim.ctx
    tpm2_load -Q -C prim.ctx -u seal.pub -r seal.priv -n seal.name -c seal.ctx
    tpm2_evictcontrol -C o -c seal.ctx "$ADDRESS"

  else
    tpm2_startauthsession -S session.ctx
    tpm2_policypcr -Q -S session.ctx -l sha256:0 -l sha256:7 -L pcr.sha256.policy

    # Enhanced just adds a PIN on top. So the stored secret is encrypted by a key.
    if [ -n "$ENHANCED" ]; then
    encrypt "${KEY}" | tpm2_create -Q -g sha256 -u pcr_seal_key.pub -r pcr_seal_key.priv -i- -C prim.ctx -L pcr.sha256.policy

    # Regular just seals the pin as-is (TPM does encryption to, but transparently)
    else
        echo "${KEY}" | tpm2_create -Q -g sha256 -u pcr_seal_key.pub -r pcr_seal_key.priv -i- -C prim.ctx -L pcr.sha256.policy
    fi

    tpm2_load -Q -C prim.ctx -u pcr_seal_key.pub -r pcr_seal_key.priv -n pcr_seal_key.name -c pcr_seal_key.ctx
    tpm2_evictcontrol -c pcr_seal_key.ctx "$ADDRESS" -C o
  fi


# Unseal gets secrets from the TPM.
elif [ "${MODE}" == "unseal" ]; then
  if [ $VACANT -eq 1 ]; then error "No value in address"; fi
  tpm2_startauthsession --policy-session -S session.ctx

  # Both NO_PCR and ENHANCED grab a pin.
  if [ -n "$NO_PCR" ] || [ -n "$ENHANCED" ] ; then
    if [ -n "$IN" ]; then
      PIN=$(cat)
    else
      PIN=$(systemd-ask-password "Provide the sealing pin for ${CONTEXT}")
    fi

    # NO_PCR just unseals it directly, whereas ENHANCED creates a PCR Policy session.
    if [ -n "$NO_PCR" ]; then
      tpm2_unseal -Q -c "$ADDRESS" | decrypt $PIN
    else
      tpm2_policypcr -Q -S session.ctx -l sha256:0 -l sha256:7
      tpm2_unseal -p session:session.ctx -c "$ADDRESS" | decrypt $PIN
      erase
    fi

  # Regular TPM sealing just verifies the policy and extracts the secret.
  else
    tpm2_policypcr -Q -S session.ctx -l sha256:0 -l sha256:7
    tpm2_unseal -p session:session.ctx -c "$ADDRESS"
    erase
  fi


# You can't actually evict from the TPM
elif [ "${MODE}" == "evict" ]; then
  if [ $VACANT -eq 1 ]; then error "No value in address"; fi
  tpm2_evictcontrol -C o -c "$ADDRESS"
fi

cleanup 0
